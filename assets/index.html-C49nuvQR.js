import{_ as l,c as r,b as i,a as e,d as o,w as a,r as d,o as u,e as s}from"./app-CrEJ5uQ_.js";const p={};function h(c,t){const n=d("RouteLink");return u(),r("div",null,[t[16]||(t[16]=i('<h1 id="jsonata" tabindex="-1"><a class="header-anchor" href="#jsonata"><span>JSONata</span></a></h1><p>JSONata is a <em>functional declarative</em> language, designed to work with JSON objects. It is built-in within Node-RED and is available in standard nodes where you see the <strong>J: expression</strong> option, for example in the <em>Inject Node</em>.</p><ul><li>JSONata code is written as a <em>line expression</em>, which is evaluated and returns the result.</li><li>The expression is evaluated against a JSON object. In Node-RED this JSON is the top level message object. There is no need to use a leading &#39;msg.&#39; therefore just <code>payload</code> will evaluate as the message payload <em>value</em>, and <code>topic</code> as the topic <em>value</em>.</li></ul><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>JSONata is very different to Mustache templates, and the use of <code>{{msg.payload}}</code> will not work as you might expect.</p></div><p>In the <strong>Home Assistant nodes</strong>, JSONata can be used to set entity states, set output property values, generate UI parameters, or as conditional tests (both generating the test value, and as an evaluated predicate expression).</p><h2 id="examples-of-using-jsonata-in-the-home-assistant-nodes" tabindex="-1"><a class="header-anchor" href="#examples-of-using-jsonata-in-the-home-assistant-nodes"><span>Examples of using JSONata in the Home Assistant Nodes:</span></a></h2>',6)),e("ol",null,[e("li",null,[o(n,{to:"/cookbook/jsonata/action.html"},{default:a(()=>[...t[0]||(t[0]=[s("Call a service using JSONata to build the data object",-1)])]),_:1}),t[1]||(t[1]=e("ul",null,[e("li",null,"Increase light brightness with remote"),e("li",null,"Set A/C target temperature and hvac mode"),e("li",null,"Send 'lights on' notification when leaving home"),e("li",null,"Extract weather forecast details from call return")],-1))]),e("li",null,[o(n,{to:"/cookbook/jsonata/current-state.html"},{default:a(()=>[...t[2]||(t[2]=[s("Read the current state or attribute value of an entity",-1)])]),_:1}),t[3]||(t[3]=e("ul",null,[e("li",null,"Report difference between A/C current and target temperatures"),e("li",null,"Report if A/C been cooling for more than 2 hours before 17:00"),e("li",null,"Report if A/C unit is running outside of 'office hours'")],-1))]),e("li",null,[o(n,{to:"/cookbook/jsonata/events-state.html"},{default:a(()=>[...t[4]||(t[4]=[s("Listen for entity state or attribute changes",-1)])]),_:1}),t[5]||(t[5]=e("ul",null,[e("li",null,"Motion detection start, and motion ending only before 08:30 and after 17:30"),e("li",null,"Switch just turned off, and has been on for less than three minutes"),e("li",null,"Motion detection only before dawn and after dusk, with dusk and dawn times output")],-1))]),e("li",null,[o(n,{to:"/cookbook/jsonata/trigger-state.html"},{default:a(()=>[...t[6]||(t[6]=[s("Trigger a flow from state change conditions",-1)])]),_:1}),t[7]||(t[7]=e("ul",null,[e("li",null,"Every minute before and after sunset"),e("li",null,"Automation events just before, at, and just after sunset"),e("li",null,"Adjust light brightness from 0 to 100 percent over sunset")],-1))]),e("li",null,[o(n,{to:"/cookbook/jsonata/sensor.html"},{default:a(()=>[...t[8]||(t[8]=[s("Write state and attribute values to an HA sensor",-1)])]),_:1}),t[9]||(t[9]=e("ul",null,[e("li",null,"Provide a sensor with a count of the number of lights that are on"),e("li",null,"Provide an attribute array (list) of the lights that are on"),e("li",null,"Since I last looked, list which lights have been turned on, or off")],-1))]),e("li",null,[o(n,{to:"/cookbook/jsonata/switch-node.html"},{default:a(()=>[...t[10]||(t[10]=[s("Route flow (switch node) based on computed outcomes",-1)])]),_:1}),t[11]||(t[11]=e("ul",null,[e("li",null,"Select flow routing depending on state 'last changed ms' period in minutes")],-1))]),e("li",null,[o(n,{to:"/cookbook/jsonata/change-node.html"},{default:a(()=>[...t[12]||(t[12]=[s("Read state history and process the return JSON (change node)",-1)])]),_:1}),t[13]||(t[13]=e("ul",null,[e("li",null,"Calculate when, and for how long, I have not been at home in the past week")],-1))]),e("li",null,[o(n,{to:"/cookbook/jsonata/functions.html"},{default:a(()=>[...t[14]||(t[14]=[s("Using the additional $entity() functions in JSONata",-1)])]),_:1}),t[15]||(t[15]=e("ul",null,[e("li",null,"Reading node entity states and attributes"),e("li",null,"Reading all Home Assistant entities"),e("li",null,"Reading Areas, Devices, and their Entities")],-1))])]),t[17]||(t[17]=i('<h2 id="home-assistant-functions" tabindex="-1"><a class="header-anchor" href="#home-assistant-functions"><span>Home Assistant functions</span></a></h2><p>There are several <em>additional</em> Home Assistant functions added for use in JSONata expressions, and these can only be used within the Home Assistant nodes.</p><ul><li><p><code>$entity()</code> returns the entity that triggered the node</p></li><li><p><code>$prevEntity()</code> returns the previous state entity if the node is an event node</p></li><li><p><code>$areaDevices(areaId)</code> returns all devices associated with a specific area ID.</p></li><li><p><code>$areaEntities(areaId)</code> returns all entities associated with a specific area ID.</p></li><li><p><code>$areas(lookup)</code> returns an area based on a provided lookup value, or all areas if no lookup value is provided. The lookup value can be an area ID, an entity ID, or a device ID.</p></li><li><p><code>$deviceEntities(device_id)</code> returns all entities associated with a specific device.</p></li><li><p><code>$device(lookup)</code> returns a device based on a provided lookup value. The lookup value can be an entity ID or a device name.</p></li><li><p><code>$entities()</code> returns all entities in the cache</p></li><li><p><code>$entities(entity_id)</code> returns a single entity from cache matching the given entity_id</p></li></ul><h2 id="exposed-lodash-functions" tabindex="-1"><a class="header-anchor" href="#exposed-lodash-functions"><span>Exposed <a href="https://lodash.com/" target="_blank" rel="noopener noreferrer">Lodash</a> functions</span></a></h2><ul><li><p><code>$sampleSize(collection, [n=1])</code> <a href="https://lodash.com/docs/#sampleSize" target="_blank" rel="noopener noreferrer">https://lodash.com/docs/#sampleSize</a></p><p>Gets n random elements at unique keys from collection up to the size of collection.</p></li><li><p><code>$randomNumber([lower=0], [upper=1], [floating])</code> <a href="https://lodash.com/docs/#random" target="_blank" rel="noopener noreferrer">https://lodash.com/docs/#random</a></p><p>Produces a random number between the inclusive lower and upper bounds. If only one argument is provided a number between 0 and the given number is returned. If floating is true, or either lower or upper are floats, a floating-point number is returned instead of an integer.</p></li></ul><p><strong>Also see:</strong></p><ul><li><a href="https://docs.jsonata.org" target="_blank" rel="noopener noreferrer">https://docs.jsonata.org</a></li><li><a href="http://try.jsonata.org" target="_blank" rel="noopener noreferrer">http://try.jsonata.org</a></li></ul>',7))])}const f=l(p,[["render",h],["__file","index.html.vue"]]),g=JSON.parse('{"path":"/guide/jsonata/","title":"JSONata","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Examples of using JSONata in the Home Assistant Nodes:","slug":"examples-of-using-jsonata-in-the-home-assistant-nodes","link":"#examples-of-using-jsonata-in-the-home-assistant-nodes","children":[]},{"level":2,"title":"Home Assistant functions","slug":"home-assistant-functions","link":"#home-assistant-functions","children":[]},{"level":2,"title":"Exposed Lodash functions","slug":"exposed-lodash-functions","link":"#exposed-lodash-functions","children":[]}],"git":{"updatedTime":1724305054000,"contributors":[{"name":"Jason","email":"37859597+zachowj@users.noreply.github.com","commits":1},{"name":"jason","email":"37859597+zachowj@users.noreply.github.com","commits":1}]},"filePathRelative":"guide/jsonata/index.md"}');export{f as comp,g as data};
