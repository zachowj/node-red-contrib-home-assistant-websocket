import{_ as o,c as i,b as n,a as s,e as a,d as l,w as r,r as d,o as c}from"./app-CrEJ5uQ_.js";const p={};function h(u,e){const t=d("RouteLink");return c(),i("div",null,[e[5]||(e[5]=n(`<h1 id="conditionals" tabindex="-1"><a class="header-anchor" href="#conditionals"><span>Conditionals</span></a></h1><h2 id="rules" tabindex="-1"><a class="header-anchor" href="#rules"><span>Rules</span></a></h2><h3 id="is-and-is-not" tabindex="-1"><a class="header-anchor" href="#is-and-is-not"><span><code>==</code>, <code>!=</code>, <code>is</code>, and <code>is not</code></span></a></h3><p>These operators check if a value is equal to or different from the expected value using the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality" target="_blank" rel="noopener noreferrer">equality</a> operator. The <code>is</code> and <code>is not</code> are aliases for <code>==</code> and <code>!=</code>.</p><h3 id="and" tabindex="-1"><a class="header-anchor" href="#and"><span><code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, and <code>&gt;=</code></span></a></h3><p>These operators compare values to determine if one is less than, less than or equal to, greater than, or greater than or equal to another value.</p><h3 id="in-and-not-in" tabindex="-1"><a class="header-anchor" href="#in-and-not-in"><span><code>in</code> and <code>not in</code></span></a></h3><p>These operators check if a value is within a specified list of items. The list should be comma-separated.</p><h4 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h4><div class="language-yaml" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">in</span><span class="token punctuation">:</span> <span class="token string">&quot;on,off&quot;</span></span>
<span class="line"></span></code></pre></div><h3 id="includes-and-not-includes" tabindex="-1"><a class="header-anchor" href="#includes-and-not-includes"><span><code>includes</code> and <code>not includes</code></span></a></h3><p>These operators check if an array includes or does not include a specified value.</p><h3 id="is-null-and-is-not-null" tabindex="-1"><a class="header-anchor" href="#is-null-and-is-not-null"><span><code>is null</code> and <code>is not null</code></span></a></h3><p>These operators check if a value is <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null" target="_blank" rel="noopener noreferrer"><code>null</code></a> or not.</p><h3 id="jsonata" tabindex="-1"><a class="header-anchor" href="#jsonata"><span><code>JSONata</code></span></a></h3>`,15)),s("p",null,[e[1]||(e[1]=a("This rule expects a boolean result from evaluating a value using JSONata, a powerful expression language. More information can be found ",-1)),e[2]||(e[2]=s("a",{href:"https://jsonata.org/",target:"_blank",rel:"noopener noreferrer"},"here",-1)),e[3]||(e[3]=a(", with examples specific to Home Assistant ",-1)),l(t,{to:"/guide/jsonata/"},{default:r(()=>[...e[0]||(e[0]=[a("here",-1)])]),_:1}),e[4]||(e[4]=a(".",-1))]),e[6]||(e[6]=n(`<h3 id="starts-with" tabindex="-1"><a class="header-anchor" href="#starts-with"><span><code>starts with</code></span></a></h3><p>This operator checks if a value begins with the expected string.</p><h3 id="in-group" tabindex="-1"><a class="header-anchor" href="#in-group"><span><code>in group</code></span></a></h3><p>This operator checks if a value is present in the <code>attributes.entity_id</code> property of a given group.</p><h2 id="value-types" tabindex="-1"><a class="header-anchor" href="#value-types"><span>Value Types</span></a></h2><h3 id="string-number-boolean-regular-expression-and-jsonata-expression" tabindex="-1"><a class="header-anchor" href="#string-number-boolean-regular-expression-and-jsonata-expression"><span><code>string</code>, <code>number</code>, <code>boolean</code>, <code>regular expression</code>, and <code>JSONata expression</code></span></a></h3><p>These types evaluate and return the value as the specified type.</p><h3 id="msg-flow-and-global" tabindex="-1"><a class="header-anchor" href="#msg-flow-and-global"><span><code>msg</code>, <code>flow</code>, and <code>global</code></span></a></h3><p>These refer to the different <a href="https://nodered.org/docs/user-guide/context" target="_blank" rel="noopener noreferrer">contexts</a> within Node-RED.</p><h3 id="entity-and-preventity" tabindex="-1"><a class="header-anchor" href="#entity-and-preventity"><span><code>entity</code> and <code>prevEntity</code></span></a></h3><p>These refer to the entities that triggered the node.</p><ul><li><code>entity</code> refers to the current state entity.</li><li><code>prevEntity</code> refers to the previous state entity.</li></ul><h4 id="examples" tabindex="-1"><a class="header-anchor" href="#examples"><span>Examples</span></a></h4><p>To reference the current state of the entity:</p><div class="language-yaml" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">entity.</span><span class="token punctuation">:</span> <span class="token string">&quot;state&quot;</span></span>
<span class="line"></span></code></pre></div><p>To reference the brightness attribute of the entity:</p><div class="language-yaml" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">entity.</span><span class="token punctuation">:</span> <span class="token string">&quot;attributes.brightness&quot;</span></span>
<span class="line"></span></code></pre></div>`,17))])}const f=o(p,[["render",h],["__file","conditionals.html.vue"]]),m=JSON.parse('{"path":"/guide/conditionals.html","title":"Conditionals","lang":"en-US","frontmatter":{"sidebarDepth":2},"headers":[{"level":2,"title":"Rules","slug":"rules","link":"#rules","children":[{"level":3,"title":"==, !=, is, and is not","slug":"is-and-is-not","link":"#is-and-is-not","children":[]},{"level":3,"title":"<, <=, >, and >=","slug":"and","link":"#and","children":[]},{"level":3,"title":"in and not in","slug":"in-and-not-in","link":"#in-and-not-in","children":[]},{"level":3,"title":"includes and not includes","slug":"includes-and-not-includes","link":"#includes-and-not-includes","children":[]},{"level":3,"title":"is null and is not null","slug":"is-null-and-is-not-null","link":"#is-null-and-is-not-null","children":[]},{"level":3,"title":"JSONata","slug":"jsonata","link":"#jsonata","children":[]},{"level":3,"title":"starts with","slug":"starts-with","link":"#starts-with","children":[]},{"level":3,"title":"in group","slug":"in-group","link":"#in-group","children":[]}]},{"level":2,"title":"Value Types","slug":"value-types","link":"#value-types","children":[{"level":3,"title":"string, number, boolean, regular expression, and JSONata expression","slug":"string-number-boolean-regular-expression-and-jsonata-expression","link":"#string-number-boolean-regular-expression-and-jsonata-expression","children":[]},{"level":3,"title":"msg, flow, and global","slug":"msg-flow-and-global","link":"#msg-flow-and-global","children":[]},{"level":3,"title":"entity and prevEntity","slug":"entity-and-preventity","link":"#entity-and-preventity","children":[]}]}],"git":{"updatedTime":1723537386000,"contributors":[{"name":"Jason","email":"37859597+zachowj@users.noreply.github.com","commits":5}]},"filePathRelative":"guide/conditionals.md"}');export{f as comp,m as data};
