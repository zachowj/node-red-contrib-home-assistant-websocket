import{_ as r,c as u,a as t,b as p,d as n,e as l,w as a,r as o,o as h}from"./app-CrEJ5uQ_.js";const g={},f={class:"hint-container tip"},c={id:"action-1",tabindex:"-1"},m={class:"header-anchor",href:"#action-1"};function b(v,e){const i=o("RouteLink"),s=o("Badge"),d=o("info-panel-only");return h(),u("div",null,[e[31]||(e[31]=t("h1",{id:"action",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#action"},[t("span",null,"Action")])],-1)),e[32]||(e[32]=t("p",null,[l("This node allows you to send a request to Home Assistant to perform specific actions. These actions could include tasks such as turning on a light ("),t("code",null,"light.turn_on"),l("), selecting an option from a dropdown menu ("),t("code",null,"input_select.select_option"),l("), or any other service call supported by Home Assistant. It serves as a bridge between Node-RED and Home Assistant, enabling automation flows to directly control devices or entities in your smart home setup.")],-1)),t("div",f,[e[1]||(e[1]=t("p",{class:"hint-container-title"},"Helpful Examples",-1)),t("p",null,[n(i,{to:"/guide/action.html"},{default:a(()=>[...e[0]||(e[0]=[l("Action Tips and Tricks",-1)])]),_:1})])]),e[33]||(e[33]=t("h2",{id:"configuration",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#configuration"},[t("span",null,"Configuration")])],-1)),t("h3",c,[t("a",m,[t("span",null,[e[2]||(e[2]=l("Action ",-1)),n(s,{text:"required"})])])]),t("ul",null,[e[5]||(e[5]=t("li",null,[l("Type: "),t("code",null,"string")],-1)),t("li",null,[e[4]||(e[4]=l("Accepts ",-1)),n(i,{to:"/guide/mustache-templates.html"},{default:a(()=>[...e[3]||(e[3]=[l("Mustache Templates",-1)])]),_:1})])]),e[34]||(e[34]=t("p",null,"Action to perform",-1)),e[35]||(e[35]=t("h3",{id:"floor",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#floor"},[t("span",null,"Floor")])],-1)),t("ul",null,[e[9]||(e[9]=t("li",null,[l("Type: "),t("code",null,"an array of floor ids")],-1)),t("li",null,[e[7]||(e[7]=l("Accepts ",-1)),n(i,{to:"/guide/mustache-templates.html"},{default:a(()=>[...e[6]||(e[6]=[l("Mustache Templates",-1)])]),_:1}),e[8]||(e[8]=l(" for ids",-1))])]),e[36]||(e[36]=t("p",null,"A list of floor ids that will be used as targets for the action",-1)),e[37]||(e[37]=t("h3",{id:"area",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#area"},[t("span",null,"Area")])],-1)),t("ul",null,[e[13]||(e[13]=t("li",null,[l("Type: "),t("code",null,"an array of area ids")],-1)),t("li",null,[e[11]||(e[11]=l("Accepts ",-1)),n(i,{to:"/guide/mustache-templates.html"},{default:a(()=>[...e[10]||(e[10]=[l("Mustache Templates",-1)])]),_:1}),e[12]||(e[12]=l(" for ids",-1))])]),e[38]||(e[38]=t("p",null,"A list of area ids that will be used as targets for the action",-1)),e[39]||(e[39]=t("p",null,[l("Custom ids can be inserted into the list by adding a "),t("code",null,"#"),l(" at the end of the id")],-1)),e[40]||(e[40]=t("h3",{id:"device",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#device"},[t("span",null,"Device")])],-1)),t("ul",null,[e[17]||(e[17]=t("li",null,[l("Type: "),t("code",null,"an array of device ids")],-1)),t("li",null,[e[15]||(e[15]=l("Accepts ",-1)),n(i,{to:"/guide/mustache-templates.html"},{default:a(()=>[...e[14]||(e[14]=[l("Mustache Templates",-1)])]),_:1}),e[16]||(e[16]=l(" for ids",-1))])]),e[41]||(e[41]=t("p",null,"A list of device ids that will be used as targets for the action",-1)),e[42]||(e[42]=t("p",null,[l("Custom ids can be inserted into the list by adding a "),t("code",null,"#"),l(" at the end of the id")],-1)),e[43]||(e[43]=t("h3",{id:"entity",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#entity"},[t("span",null,"Entity")])],-1)),t("ul",null,[e[21]||(e[21]=t("li",null,[l("Type: "),t("code",null,"an array of entity ids")],-1)),t("li",null,[e[19]||(e[19]=l("Accepts ",-1)),n(i,{to:"/guide/mustache-templates.html"},{default:a(()=>[...e[18]||(e[18]=[l("Mustache Templates",-1)])]),_:1}),e[20]||(e[20]=l(" for ids",-1))])]),e[44]||(e[44]=t("p",null,"A list of entity ids that will be used as targets for the action",-1)),e[45]||(e[45]=t("h3",{id:"label",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#label"},[t("span",null,"Label")])],-1)),t("ul",null,[e[25]||(e[25]=t("li",null,[l("Type: "),t("code",null,"an array of label ids")],-1)),t("li",null,[e[23]||(e[23]=l("Accepts ",-1)),n(i,{to:"/guide/mustache-templates.html"},{default:a(()=>[...e[22]||(e[22]=[l("Mustache Templates",-1)])]),_:1}),e[24]||(e[24]=l(" for ids",-1))])]),e[46]||(e[46]=t("p",null,"A list of label ids that will be used as targets for the action",-1)),e[47]||(e[47]=t("h3",{id:"data",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#data"},[t("span",null,"Data")])],-1)),t("ul",null,[e[29]||(e[29]=t("li",null,[l("Type: "),t("code",null,"JSONata | JSON")],-1)),t("li",null,[e[27]||(e[27]=l("Accepts ",-1)),n(i,{to:"/guide/mustache-templates.html"},{default:a(()=>[...e[26]||(e[26]=[l("Mustache Templates",-1)])]),_:1}),e[28]||(e[28]=l(" when data type is JSON",-1))])]),e[48]||(e[48]=p(`<p>JSON object to pass along.</p><h3 id="merge-context" tabindex="-1"><a class="header-anchor" href="#merge-context"><span>Merge Context</span></a></h3><ul><li>Type: <code>string</code></li></ul><p>If defined will attempt to merge the global and flow context variable into the config</p><h3 id="alternative-template-tags" tabindex="-1"><a class="header-anchor" href="#alternative-template-tags"><span>Alternative Template Tags</span></a></h3><ul><li>Type: <code>boolean</code></li></ul><p>Will change the tags used for the mustache template to <code>&lt;%</code> and <code>%&gt;</code></p><h3 id="queue" tabindex="-1"><a class="header-anchor" href="#queue"><span>Queue</span></a></h3><ul><li>Type: <code>none | first | all | last</code></li></ul><p>Will store the first, last, or all messages received while disconnected from Home Assistant and send them once connected again</p><h3 id="block-input-overrides" tabindex="-1"><a class="header-anchor" href="#block-input-overrides"><span>Block Input Overrides</span></a></h3><ul><li>Type: <code>boolean</code></li><li>Default: <code>true</code></li></ul><p>Stop <code>msg.payload</code> values from overriding local config</p><h2 id="input" tabindex="-1"><a class="header-anchor" href="#input"><span>Input</span></a></h2><p>All properties need to be under <code>msg.payload</code>.</p><p>Sample input</p><div class="language-JSON" data-highlighter="prismjs" data-ext="JSON" data-title="JSON"><pre><code><span class="line">{</span>
<span class="line">    &quot;action&quot;: &quot;homeassistant.turn_on&quot;,</span>
<span class="line">    &quot;target&quot;: {</span>
<span class="line">        &quot;floor_id&quot;: [&quot;first_floor&quot;],</span>
<span class="line">        &quot;area_id&quot;: [&quot;kitchen&quot;],</span>
<span class="line">        &quot;device_id&quot;: [&quot;8932894082930482903&quot;],</span>
<span class="line">        &quot;entity_id&quot;: [&quot;light.kitchen&quot;, &quot;switch.garage_light&quot;],</span>
<span class="line">        &quot;label_id&quot;: [&quot;outdoor_lights&quot;]</span>
<span class="line">    }</span>
<span class="line">    &quot;data&quot;: {</span>
<span class="line">        &quot;brightness_pct&quot;: 50</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre></div><h4 id="merging" tabindex="-1"><a class="header-anchor" href="#merging"><span>Merging</span></a></h4><p>If the incoming message has a <code>payload</code> property with <code>action</code> set it will override any config values if set.</p><p>If the incoming message has a <code>payload.data</code> that is an object these properties will be <strong>merged</strong> with any config values set.</p><p>If the node has a property value in its config for <code>Merge Context</code> then the <code>flow</code> and <code>global</code> contexts will be checked for this property which should be an object that will also be merged into the data payload.</p><h4 id="merge-resolution" tabindex="-1"><a class="header-anchor" href="#merge-resolution"><span>Merge Resolution</span></a></h4><p>As seen above the <code>data</code> property has a lot going on in the way of data merging, in the end, all of these are optional and the rightmost will win if a property exists in multiple objects</p><p>Config Data, Global Data, Flow Data, Payload Data ( payload data property always wins if provided )</p><h3 id="action-2" tabindex="-1"><a class="header-anchor" href="#action-2"><span>action</span></a></h3><ul><li>Type: <code>string</code></li></ul><p>Action to call</p><h3 id="data-1" tabindex="-1"><a class="header-anchor" href="#data-1"><span>data</span></a></h3><ul><li>Type: <code>JSON Object</code></li></ul><p>Data to send with the action</p><h3 id="target" tabindex="-1"><a class="header-anchor" href="#target"><span>target</span></a></h3><ul><li>Type: <code>JSON Object with floor_id, area_id, device_id, entity_id, and label_id as array properties</code></li></ul><p>Targets of the action</p><h2 id="output" tabindex="-1"><a class="header-anchor" href="#output"><span>Output</span></a></h2><p>Value types:</p><ul><li><code>config</code>: config properties of the node</li><li><code>results</code>: response from Home Assistant</li><li><code>sent data</code>: data sent to Home Assistant</li></ul><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references"><span>References</span></a></h2>`,37)),n(d,null,{default:a(()=>[t("p",null,[n(i,{to:"/node/action.html"},{default:a(()=>[...e[30]||(e[30]=[l("External Docs",-1)])]),_:1})])]),_:1})])}const x=r(g,[["render",b],["__file","action.html.vue"]]),q=JSON.parse('{"path":"/node/action.html","title":"Action","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Configuration","slug":"configuration","link":"#configuration","children":[{"level":3,"title":"Action","slug":"action-1","link":"#action-1","children":[]},{"level":3,"title":"Floor","slug":"floor","link":"#floor","children":[]},{"level":3,"title":"Area","slug":"area","link":"#area","children":[]},{"level":3,"title":"Device","slug":"device","link":"#device","children":[]},{"level":3,"title":"Entity","slug":"entity","link":"#entity","children":[]},{"level":3,"title":"Label","slug":"label","link":"#label","children":[]},{"level":3,"title":"Data","slug":"data","link":"#data","children":[]},{"level":3,"title":"Merge Context","slug":"merge-context","link":"#merge-context","children":[]},{"level":3,"title":"Alternative Template Tags","slug":"alternative-template-tags","link":"#alternative-template-tags","children":[]},{"level":3,"title":"Queue","slug":"queue","link":"#queue","children":[]},{"level":3,"title":"Block Input Overrides","slug":"block-input-overrides","link":"#block-input-overrides","children":[]}]},{"level":2,"title":"Input","slug":"input","link":"#input","children":[{"level":3,"title":"action","slug":"action-2","link":"#action-2","children":[]},{"level":3,"title":"data","slug":"data-1","link":"#data-1","children":[]},{"level":3,"title":"target","slug":"target","link":"#target","children":[]}]},{"level":2,"title":"Output","slug":"output","link":"#output","children":[]},{"level":2,"title":"References","slug":"references","link":"#references","children":[]}],"git":{"updatedTime":1735610028000,"contributors":[{"name":"jason","email":"37859597+zachowj@users.noreply.github.com","commits":3},{"name":"Jason","email":"37859597+zachowj@users.noreply.github.com","commits":2}]},"filePathRelative":"node/action.md"}');export{x as comp,q as data};
