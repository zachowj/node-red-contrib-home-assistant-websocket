import{_ as e,c as o,b as s,o as r}from"./app-CrEJ5uQ_.js";const n={};function a(i,t){return r(),o("div",null,[...t[0]||(t[0]=[s('<h1 id="output-properties" tabindex="-1"><a class="header-anchor" href="#output-properties"><span>Output Properties</span></a></h1><h3 id="types-of-output-properties" tabindex="-1"><a class="header-anchor" href="#types-of-output-properties"><span>Types of Output Properties</span></a></h3><h4 id="entity" tabindex="-1"><a class="header-anchor" href="#entity"><span><strong>entity</strong></span></a></h4><p>Outputs the <strong>full state object</strong> from Home Assistant. This includes all attributes, state, entity ID, and other metadata.</p><p><a href="https://www.home-assistant.io/docs/configuration/state_object/#about-the-state-object" target="_blank" rel="noopener noreferrer">About the state object</a></p><h4 id="entity-id" tabindex="-1"><a class="header-anchor" href="#entity-id"><span><strong>entity id</strong></span></a></h4><p>Outputs the <strong>entity ID</strong> of the triggered entity.</p><h4 id="entity-state" tabindex="-1"><a class="header-anchor" href="#entity-state"><span><strong>entity state</strong></span></a></h4><p>Outputs the <strong>current state</strong> of the triggered entity. All states received from Home Assistant are strings, but you can apply common type conversions:</p><ul><li><p><strong>number</strong> – converts numeric strings to numbers</p></li><li><p><strong>boolean</strong> – converts strings to boolean values based on the following rules:</p><ul><li>If the value is a number, it returns <code>true</code> for any non-zero number and <code>false</code> for zero.</li><li>If the value is a string, it trims and lowercases the string, returning <code>true</code> for &quot;true&quot;, <code>false</code> for &quot;false&quot;, or attempts to convert numeric strings to a boolean based on their numeric value.</li><li>For all other types or unrecognized values, it returns <code>false</code>.</li></ul></li><li><p><strong>Home Assistant boolean</strong> – converts <code>&quot;y&quot;</code>, <code>&quot;yes&quot;</code>, <code>&quot;true&quot;</code>, <code>&quot;on&quot;</code>, <code>&quot;home&quot;</code>, and <code>&quot;open&quot;</code> to <code>true</code> boolean values and everything else to <code>false</code>. These can be customized in the server node config settings.</p></li></ul><h4 id="config" tabindex="-1"><a class="header-anchor" href="#config"><span><strong>config</strong></span></a></h4><p>Outputs the <strong>node’s configuration properties</strong>.</p>',12)])])}const p=e(n,[["render",a],["__file","output-properties.html.vue"]]),c=JSON.parse('{"path":"/guide/output-properties.html","title":"Output Properties","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"Types of Output Properties","slug":"types-of-output-properties","link":"#types-of-output-properties","children":[]}],"git":{"updatedTime":1761531368000,"contributors":[{"name":"jason","email":"37859597+zachowj@users.noreply.github.com","commits":1}]},"filePathRelative":"guide/output-properties.md"}');export{p as comp,c as data};
