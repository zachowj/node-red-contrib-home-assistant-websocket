import{_ as t,c as a,b as o,o as c}from"./app-CrEJ5uQ_.js";const s={};function i(n,e){return c(),a("div",null,[...e[0]||(e[0]=[o('<h1 id="mustache-templates" tabindex="-1"><a class="header-anchor" href="#mustache-templates"><span>Mustache Templates</span></a></h1><p>When using templates, the top level refers to a property of the message object. For example, <code>msg.payload</code> would be accessed as <code>{{payload}}</code>.</p><p>You can also access <code>flow</code>, <code>global</code>, and <code>states</code> contexts with the following syntax:</p><ul><li><code>flow</code> context: <code>{{flow.foobar}}</code></li><li><code>global</code> context: <code>{{global.something}}</code></li><li><code>states</code> context: Use <code>{{entity.domain.entity_id}}</code> to get the state, or drill further down with <code>{{entity.light.kitchen.attributes.friendly_name}}</code>.</li></ul><p>Note:</p><ul><li><code>{{entity.light.kitchen}}</code> and <code>{{entity.light.kitchen.state}}</code> are equivalent.</li></ul><p>By default, Mustache will replace certain characters with their HTML escape codes. To prevent this, use triple braces: <code>{{{payload}}}</code>.</p><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>Mustache templates are ideal for handling strings. However, if you need to insert a JSON object, consider using a JSONata expression or handling it with a function node and passing it as an input.</p></div>',8)])])}const d=t(s,[["render",i],["__file","mustache-templates.html.vue"]]),r=JSON.parse('{"path":"/guide/mustache-templates.html","title":"Mustache Templates","lang":"en-US","frontmatter":{},"headers":[],"git":{"updatedTime":1723801933000,"contributors":[{"name":"Jason","email":"37859597+zachowj@users.noreply.github.com","commits":2}]},"filePathRelative":"guide/mustache-templates.md"}');export{d as comp,r as data};
