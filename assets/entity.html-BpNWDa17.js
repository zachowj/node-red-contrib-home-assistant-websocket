import{_ as o,c as l,b as n,a as t,e as s,d as i,r,o as d}from"./app-CrEJ5uQ_.js";const h={},u={id:"type",tabindex:"-1"},c={class:"header-anchor",href:"#type"},p={id:"state",tabindex:"-1"},b={class:"header-anchor",href:"#state"};function g(f,e){const a=r("Badge");return d(),l("div",null,[e[2]||(e[2]=n('<div class="hint-container caution"><p class="hint-container-title">DEPRECATED</p><p>This node has been deprecated in favor of the individual entity nodes. The individual entity nodes can be used in subflows and added to devices.</p></div><h1 id="entity" tabindex="-1"><a class="header-anchor" href="#entity"><span>Entity</span></a></h1><p>Creates an entity in Home Assistant which can be manipulated from this node.</p><p><code>binary sensor</code>, <code>sensor</code>, and <code>switch</code></p><div class="hint-container warning"><p class="hint-container-title">Warning</p><p><em>Needs <a href="https://github.com/zachowj/hass-node-red" target="_blank" rel="noopener noreferrer">Custom Integration</a> installed in Home Assistant for this node to function</em></p></div><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration"><span>Configuration</span></a></h2>',6)),t("h3",u,[t("a",c,[t("span",null,[e[0]||(e[0]=s("Type ",-1)),i(a,{text:"required"})])])]),e[3]||(e[3]=n('<ul><li>Type: <code>string</code></li><li>Values <code>binary_sensor|sensor|switch</code></li><li>Default: <code>sensor</code></li></ul><p>The state the entity should be updated to</p><h3 id="home-assistant-config" tabindex="-1"><a class="header-anchor" href="#home-assistant-config"><span>Home Assistant Config</span></a></h3><ul><li>Type: <code>Object</code></li></ul><p>Configuration options available for the selected entity</p><div class="hint-container caution"><p class="hint-container-title">WARNING</p><p>Entity nodes will not work in a subflow due to the way they register themselves with Home Assistant. After a Node-RED restart, a new entity will be created in Home Assistant.</p></div><h2 id="sensor-configuration" tabindex="-1"><a class="header-anchor" href="#sensor-configuration"><span>Sensor Configuration</span></a></h2>',7)),t("h3",p,[t("a",b,[t("span",null,[e[1]||(e[1]=s("State ",-1)),i(a,{text:"required"})])])]),e[4]||(e[4]=n('<ul><li>Type: <code>string | number | boolean</code></li></ul><p>The state the entity should be updated to</p><h3 id="attributes" tabindex="-1"><a class="header-anchor" href="#attributes"><span>Attributes</span></a></h3><ul><li>Type: <code>Object</code></li></ul><p>Key/Value pair of attributes to update. The key should be a string and the value can be a [string | number | boolean | object]</p><h3 id="input-override" tabindex="-1"><a class="header-anchor" href="#input-override"><span>Input Override</span></a></h3><ul><li>Type: <code>string</code></li><li>Values: <code>accept | merge | block</code></li></ul><p>Determine how input values will be handled. When merge is selected the message object values will override the configuration values.</p><h3 id="resend-state-and-attributes" tabindex="-1"><a class="header-anchor" href="#resend-state-and-attributes"><span>Resend state and attributes</span></a></h3><ul><li>Type: <code>boolean</code></li></ul><p>When creating the entity in Home Assistant this will also send the last updated state and attributes then node sent to Home Assistant</p><h2 id="switch-configuration" tabindex="-1"><a class="header-anchor" href="#switch-configuration"><span>Switch Configuration</span></a></h2><h3 id="output-on-state-change" tabindex="-1"><a class="header-anchor" href="#output-on-state-change"><span>Output on state change</span></a></h3><ul><li>Type: <code>boolean</code></li></ul><p>When the state of the switch changes it will output to the top if the switch is on or to the bottom if it is in the off position.</p><h3 id="payload" tabindex="-1"><a class="header-anchor" href="#payload"><span>Payload</span></a></h3><ul><li>Type: <code>str | num | bool | JSONata | timestamp</code></li></ul><p>Customizable output set to <code>msg.payload</code> if <code>Output on state change</code> is enabled.</p><h2 id="sensors-inputs" tabindex="-1"><a class="header-anchor" href="#sensors-inputs"><span>Sensors Inputs</span></a></h2><p>properties of <code>msg.payload</code></p><h3 id="state-1" tabindex="-1"><a class="header-anchor" href="#state-1"><span>state</span></a></h3><ul><li>Type: <code>string | number | boolean</code></li></ul><p>The state the entity should be updated to</p><h3 id="attributes-1" tabindex="-1"><a class="header-anchor" href="#attributes-1"><span>attributes</span></a></h3><ul><li>Type: <code>Object</code></li></ul><p>Key/Value pair of attributes to update. The key should be a string and the value can be a <code>[string | number | boolean | object]</code></p><h2 id="switch-inputs" tabindex="-1"><a class="header-anchor" href="#switch-inputs"><span>Switch Inputs</span></a></h2><h3 id="msg-enable" tabindex="-1"><a class="header-anchor" href="#msg-enable"><span>msg.enable</span></a></h3><ul><li>Type: <code>boolean</code></li></ul><p>Set to <code>true</code> to turn on the switch and <code>false</code> to turn off. If the message has a property <code>enable</code> set to the type <code>boolean</code> the node will not have any output.</p><h2 id="outputs" tabindex="-1"><a class="header-anchor" href="#outputs"><span>Outputs</span></a></h2><p><strong>Status Color</strong></p><ul><li>Green/Red: output from the node was due to input to the node</li><li>Blue: output from the node was due to the state of the node changing</li><li>Yellow: state of node changed but no output</li></ul>',33))])}const y=o(h,[["render",g],["__file","entity.html.vue"]]),v=JSON.parse('{"path":"/node/entity.html","title":"Entity","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Configuration","slug":"configuration","link":"#configuration","children":[{"level":3,"title":"Type","slug":"type","link":"#type","children":[]},{"level":3,"title":"Home Assistant Config","slug":"home-assistant-config","link":"#home-assistant-config","children":[]}]},{"level":2,"title":"Sensor Configuration","slug":"sensor-configuration","link":"#sensor-configuration","children":[{"level":3,"title":"State","slug":"state","link":"#state","children":[]},{"level":3,"title":"Attributes","slug":"attributes","link":"#attributes","children":[]},{"level":3,"title":"Input Override","slug":"input-override","link":"#input-override","children":[]},{"level":3,"title":"Resend state and attributes","slug":"resend-state-and-attributes","link":"#resend-state-and-attributes","children":[]}]},{"level":2,"title":"Switch Configuration","slug":"switch-configuration","link":"#switch-configuration","children":[{"level":3,"title":"Output on state change","slug":"output-on-state-change","link":"#output-on-state-change","children":[]},{"level":3,"title":"Payload","slug":"payload","link":"#payload","children":[]}]},{"level":2,"title":"Sensors Inputs","slug":"sensors-inputs","link":"#sensors-inputs","children":[{"level":3,"title":"state","slug":"state-1","link":"#state-1","children":[]},{"level":3,"title":"attributes","slug":"attributes-1","link":"#attributes-1","children":[]}]},{"level":2,"title":"Switch Inputs","slug":"switch-inputs","link":"#switch-inputs","children":[{"level":3,"title":"msg.enable","slug":"msg-enable","link":"#msg-enable","children":[]}]},{"level":2,"title":"Outputs","slug":"outputs","link":"#outputs","children":[]}],"git":{"updatedTime":1662500089000,"contributors":[{"name":"Jason","email":"37859597+zachowj@users.noreply.github.com","commits":6}]},"filePathRelative":"node/entity.md"}');export{y as comp,v as data};
